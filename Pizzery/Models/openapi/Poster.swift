//
// Poster.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Афиша в ресторане */
public struct Poster: Codable, Hashable {

    public var id: Int64?
    public var outletId: Int64?
    public var name: String?
    /** id партнера */
    public var partnerId: Int64?
    /** описание афишы */
    public var smallDescription: String?
    /** подробное описание афишы */
    public var description: String?
    /** Урлы пикч */
    public var imageUrls: [String]?
    /** кол-во пикч */
    public var imageQty: Int?
    /** видна ли афиша */
    public var visible: Bool?
    /** дата публикации афиши */
    public var publicDate: Int64?
    /** дата начала мероприятия/афиши */
    public var startDate: Int64?
    /** дата окончания мероприятия/афиши */
    public var finishDate: Int64?

    public init(id: Int64? = nil, outletId: Int64? = nil, name: String? = nil, partnerId: Int64? = nil, smallDescription: String? = nil, description: String? = nil, imageUrls: [String]? = nil, imageQty: Int? = nil, visible: Bool? = nil, publicDate: Int64? = nil, startDate: Int64? = nil, finishDate: Int64? = nil) {
        self.id = id
        self.outletId = outletId
        self.name = name
        self.partnerId = partnerId
        self.smallDescription = smallDescription
        self.description = description
        self.imageUrls = imageUrls
        self.imageQty = imageQty
        self.visible = visible
        self.publicDate = publicDate
        self.startDate = startDate
        self.finishDate = finishDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case outletId = "outlet_id"
        case name
        case partnerId = "partner_id"
        case smallDescription = "small_description"
        case description
        case imageUrls = "image_urls"
        case imageQty = "image_qty"
        case visible
        case publicDate = "public_date"
        case startDate = "start_date"
        case finishDate = "finish_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(outletId, forKey: .outletId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(smallDescription, forKey: .smallDescription)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(imageUrls, forKey: .imageUrls)
        try container.encodeIfPresent(imageQty, forKey: .imageQty)
        try container.encodeIfPresent(visible, forKey: .visible)
        try container.encodeIfPresent(publicDate, forKey: .publicDate)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(finishDate, forKey: .finishDate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Poster: Identifiable {}
