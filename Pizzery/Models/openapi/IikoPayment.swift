//
// IikoPayment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** iiko платежи заказов (используются для проведения скидки в заказе или определении кэшбека за заказ) */
public struct IikoPayment: Codable, Hashable {

    public var id: Int64?
    public var name: String?
    public var kind: String?
    /** используется для проведения скидки в данном терминале (только один платеж на терминал) */
    public var forDiscount: Bool?
    /** используется для начисления баллов в данном терминале (может быть несколько) */
    public var forCashback: Bool?
    /** можно ли платеж использовать для скидки, необходимо учитывать  при /outlets/terminals/set_payment */
    public var canBeUsedForDiscount: Bool?
    public var isDeleted: Bool?

    public init(id: Int64? = nil, name: String? = nil, kind: String? = nil, forDiscount: Bool? = nil, forCashback: Bool? = nil, canBeUsedForDiscount: Bool? = nil, isDeleted: Bool? = nil) {
        self.id = id
        self.name = name
        self.kind = kind
        self.forDiscount = forDiscount
        self.forCashback = forCashback
        self.canBeUsedForDiscount = canBeUsedForDiscount
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case kind
        case forDiscount = "for_discount"
        case forCashback = "for_cashback"
        case canBeUsedForDiscount = "can_be_used_for_discount"
        case isDeleted = "is_deleted"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(forDiscount, forKey: .forDiscount)
        try container.encodeIfPresent(forCashback, forKey: .forCashback)
        try container.encodeIfPresent(canBeUsedForDiscount, forKey: .canBeUsedForDiscount)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension IikoPayment: Identifiable {}
