//
// PaymentItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PaymentItem: Codable, Hashable {

    public var id: String?
    public var sum: Double?
    /** Minimum allowed payment sum, lower bound for the payment. null means default limit value. */
    public var minSum: Double?
    /** Maximum allowed payment sum, upper bound for the payment. null means default limit value. */
    public var maxSum: Double?
    /** \\ 0 - New 1 - Processed 2 - Storned 3 - Cancelled */
    public var status: Int?
    /** Additional data object */
    public var additionalData: AnyCodable?
    public var type: PaymentType?
    /** IDonationType object */
    public var donationType: AnyCodable?
    public var isPreliminary: Bool?
    public var isExternal: Bool?
    public var isFiscalizedExternally: Bool?
    public var isProcessedExternally: Bool?
    /** Is prepay was processed as discount both on cash register and in iiko */
    public var isProcessedAsDiscount: Bool?
    /** Is prepay was fiscalized as discount on cash register but stay as non-fiscal payment in iiko */
    public var isFiscalizedAsDiscount: Bool?
    /** Whether payment item is prepay */
    public var isPrepay: Bool?
    /** Point of sale where payment was processed */
    public var pointOfSale: AnyCodable?
    /** Organization details information */
    public var organizationDetailsInfo: AnyCodable?
    /** Guest id to which payment item was added, or null if payment item not associated with any guest. */
    public var guestId: UUID?

    public init(id: String? = nil, sum: Double? = nil, minSum: Double? = nil, maxSum: Double? = nil, status: Int? = nil, additionalData: AnyCodable? = nil, type: PaymentType? = nil, donationType: AnyCodable? = nil, isPreliminary: Bool? = nil, isExternal: Bool? = nil, isFiscalizedExternally: Bool? = nil, isProcessedExternally: Bool? = nil, isProcessedAsDiscount: Bool? = nil, isFiscalizedAsDiscount: Bool? = nil, isPrepay: Bool? = nil, pointOfSale: AnyCodable? = nil, organizationDetailsInfo: AnyCodable? = nil, guestId: UUID? = nil) {
        self.id = id
        self.sum = sum
        self.minSum = minSum
        self.maxSum = maxSum
        self.status = status
        self.additionalData = additionalData
        self.type = type
        self.donationType = donationType
        self.isPreliminary = isPreliminary
        self.isExternal = isExternal
        self.isFiscalizedExternally = isFiscalizedExternally
        self.isProcessedExternally = isProcessedExternally
        self.isProcessedAsDiscount = isProcessedAsDiscount
        self.isFiscalizedAsDiscount = isFiscalizedAsDiscount
        self.isPrepay = isPrepay
        self.pointOfSale = pointOfSale
        self.organizationDetailsInfo = organizationDetailsInfo
        self.guestId = guestId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case sum = "Sum"
        case minSum = "MinSum"
        case maxSum = "MaxSum"
        case status = "Status"
        case additionalData = "AdditionalData"
        case type = "Type"
        case donationType = "DonationType"
        case isPreliminary = "IsPreliminary"
        case isExternal = "IsExternal"
        case isFiscalizedExternally = "IsFiscalizedExternally"
        case isProcessedExternally = "IsProcessedExternally"
        case isProcessedAsDiscount = "IsProcessedAsDiscount"
        case isFiscalizedAsDiscount = "IsFiscalizedAsDiscount"
        case isPrepay = "IsPrepay"
        case pointOfSale = "PointOfSale"
        case organizationDetailsInfo = "OrganizationDetailsInfo"
        case guestId = "GuestId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(sum, forKey: .sum)
        try container.encodeIfPresent(minSum, forKey: .minSum)
        try container.encodeIfPresent(maxSum, forKey: .maxSum)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(additionalData, forKey: .additionalData)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(donationType, forKey: .donationType)
        try container.encodeIfPresent(isPreliminary, forKey: .isPreliminary)
        try container.encodeIfPresent(isExternal, forKey: .isExternal)
        try container.encodeIfPresent(isFiscalizedExternally, forKey: .isFiscalizedExternally)
        try container.encodeIfPresent(isProcessedExternally, forKey: .isProcessedExternally)
        try container.encodeIfPresent(isProcessedAsDiscount, forKey: .isProcessedAsDiscount)
        try container.encodeIfPresent(isFiscalizedAsDiscount, forKey: .isFiscalizedAsDiscount)
        try container.encodeIfPresent(isPrepay, forKey: .isPrepay)
        try container.encodeIfPresent(pointOfSale, forKey: .pointOfSale)
        try container.encodeIfPresent(organizationDetailsInfo, forKey: .organizationDetailsInfo)
        try container.encodeIfPresent(guestId, forKey: .guestId)
    }
}

