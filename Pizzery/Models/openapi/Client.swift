//
// Client.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Клиент */
public struct Client: Codable, Hashable {

    public var id: Int64?
    public var iikoId: String?
    /** Код карты лояльности 6 цифр */
    public var loyaltyCard: String?
    /** К какому партнеру привязан */
    public var partnerId: Int64?
    /** unix timestamp ms */
    public var createdAt: Int64?
    /** unix timestamp ms */
    public var updatedAt: Int64?
    /** unix timestamp ms */
    public var lastActiveAt: Int64?
    public var phone: String?
    public var email: String?
    public var ordersCount: Int64?
    public var loyaltyLevel: LoyaltyLevel?
    /** Баланс баллов (в копейках) */
    public var bonusBalance: Int64?
    /** Сумма оплаты заказов за все время, для определения уровня лояльности (в копейках) */
    public var totalSumOrders: Int64?
    /** Потраченная сумма (в копейках) */
    public var spentSum: Int64?
    /** Средний чек (в копейках) */
    public var averageOrderAmount: Int64?
    /** День др */
    public var dayOfBirth: Int64?
    /** Месяц др */
    public var monthOfBirth: Int64?
    /** Год др */
    public var yearOfBirth: Int64?
    public var gender: Gender?
    /** Заметка о клиенте */
    public var note: String?
    /** Заблокирован ли клиент */
    public var isBlocked: Bool
    /** Удален ли клиент */
    public var isDeleted: Bool?
    /** Инициализирован ли клиент */
    public var _init: Bool
    /** Устарело, не использовать! */
    public var referrerId: Int64?
    /** айди реф кода, по которому была регистрация */
    public var sourceRefcodeId: Int64?
    /** айди реф кода клиента */
    public var refcodeId: Int64?
    /** реф код клиента */
    public var refcode: String?
    /** Имя */
    public var firstName: String?
    /** Фамилия */
    public var lastName: String?
    /** Отчество при наличии */
    public var middleName: String?

    public init(id: Int64? = nil, iikoId: String? = nil, loyaltyCard: String? = nil, partnerId: Int64? = nil, createdAt: Int64? = nil, updatedAt: Int64? = nil, lastActiveAt: Int64? = nil, phone: String? = nil, email: String? = nil, ordersCount: Int64? = nil, loyaltyLevel: LoyaltyLevel? = nil, bonusBalance: Int64? = nil, totalSumOrders: Int64? = nil, spentSum: Int64? = nil, averageOrderAmount: Int64? = nil, dayOfBirth: Int64? = nil, monthOfBirth: Int64? = nil, yearOfBirth: Int64? = nil, gender: Gender? = nil, note: String? = nil, isBlocked: Bool, isDeleted: Bool? = nil, _init: Bool, referrerId: Int64? = nil, sourceRefcodeId: Int64? = nil, refcodeId: Int64? = nil, refcode: String? = nil, firstName: String? = nil, lastName: String? = nil, middleName: String? = nil) {
        self.id = id
        self.iikoId = iikoId
        self.loyaltyCard = loyaltyCard
        self.partnerId = partnerId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.lastActiveAt = lastActiveAt
        self.phone = phone
        self.email = email
        self.ordersCount = ordersCount
        self.loyaltyLevel = loyaltyLevel
        self.bonusBalance = bonusBalance
        self.totalSumOrders = totalSumOrders
        self.spentSum = spentSum
        self.averageOrderAmount = averageOrderAmount
        self.dayOfBirth = dayOfBirth
        self.monthOfBirth = monthOfBirth
        self.yearOfBirth = yearOfBirth
        self.gender = gender
        self.note = note
        self.isBlocked = isBlocked
        self.isDeleted = isDeleted
        self._init = _init
        self.referrerId = referrerId
        self.sourceRefcodeId = sourceRefcodeId
        self.refcodeId = refcodeId
        self.refcode = refcode
        self.firstName = firstName
        self.lastName = lastName
        self.middleName = middleName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case iikoId = "iiko_id"
        case loyaltyCard = "loyalty_card"
        case partnerId = "partner_id"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case lastActiveAt = "last_active_at"
        case phone
        case email
        case ordersCount = "orders_count"
        case loyaltyLevel = "loyalty_level"
        case bonusBalance = "bonus_balance"
        case totalSumOrders = "total_sum_orders"
        case spentSum = "spent_sum"
        case averageOrderAmount = "average_order_amount"
        case dayOfBirth = "day_of_birth"
        case monthOfBirth = "month_of_birth"
        case yearOfBirth = "year_of_birth"
        case gender
        case note
        case isBlocked = "is_blocked"
        case isDeleted = "is_deleted"
        case _init = "init"
        case referrerId = "referrer_id"
        case sourceRefcodeId = "source_refcode_id"
        case refcodeId = "refcode_id"
        case refcode
        case firstName = "first_name"
        case lastName = "last_name"
        case middleName = "middle_name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(iikoId, forKey: .iikoId)
        try container.encodeIfPresent(loyaltyCard, forKey: .loyaltyCard)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(lastActiveAt, forKey: .lastActiveAt)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(ordersCount, forKey: .ordersCount)
        try container.encodeIfPresent(loyaltyLevel, forKey: .loyaltyLevel)
        try container.encodeIfPresent(bonusBalance, forKey: .bonusBalance)
        try container.encodeIfPresent(totalSumOrders, forKey: .totalSumOrders)
        try container.encodeIfPresent(spentSum, forKey: .spentSum)
        try container.encodeIfPresent(averageOrderAmount, forKey: .averageOrderAmount)
        try container.encodeIfPresent(dayOfBirth, forKey: .dayOfBirth)
        try container.encodeIfPresent(monthOfBirth, forKey: .monthOfBirth)
        try container.encodeIfPresent(yearOfBirth, forKey: .yearOfBirth)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encode(isBlocked, forKey: .isBlocked)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encode(_init, forKey: ._init)
        try container.encodeIfPresent(referrerId, forKey: .referrerId)
        try container.encodeIfPresent(sourceRefcodeId, forKey: .sourceRefcodeId)
        try container.encodeIfPresent(refcodeId, forKey: .refcodeId)
        try container.encodeIfPresent(refcode, forKey: .refcode)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Client: Identifiable {}
