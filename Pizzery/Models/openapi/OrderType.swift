//
// OrderType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderType: Codable, Hashable {

    public var id: String?
    public var name: String?
    /** Orders of which service type this order type is applicable for. There is only one service type, single enum value, despite of the flags attribute. \\ 1 - Common. Regular order to be served on table or sold as a FastFood. 2 - DeliveryByCourier. Delivery order to be delivered by courier. 4 - DeliveryByClient. Да 4, а не 3. Delivery order to be picked up by client himself. */
    public var orderServiceType: Int?
    /** Gets a value that indicates whether this order type set by default to orders with corresponding service type. */
    public var isDefaultForServiceType: Bool?
    /** Gets a value that indicates whether this order type can be set to orders. Order type can be activated or deactivated via iikoOffice. */
    public var isActive: Bool?

    public init(id: String? = nil, name: String? = nil, orderServiceType: Int? = nil, isDefaultForServiceType: Bool? = nil, isActive: Bool? = nil) {
        self.id = id
        self.name = name
        self.orderServiceType = orderServiceType
        self.isDefaultForServiceType = isDefaultForServiceType
        self.isActive = isActive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case name = "Name"
        case orderServiceType = "OrderServiceType"
        case isDefaultForServiceType = "IsDefaultForServiceType"
        case isActive = "IsActive"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(orderServiceType, forKey: .orderServiceType)
        try container.encodeIfPresent(isDefaultForServiceType, forKey: .isDefaultForServiceType)
        try container.encodeIfPresent(isActive, forKey: .isActive)
    }
}

