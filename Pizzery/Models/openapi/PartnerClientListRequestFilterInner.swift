//
// PartnerClientListRequestFilterInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PartnerClientListRequestFilterInner: Codable, Hashable {

    public enum FilterParameter: String, Codable, CaseIterable {
        case ordersCount = "orders_count"
        case spentSum = "spent_sum"
        case averageOrderAmount = "average_order_amount"
        case orderDate = "order_date"
        case loyaltyLevel = "loyalty_level"
        case balance = "balance"
        case createdAt = "created_at"
        case gender = "gender"
        case age = "age"
        case status = "status"
    }
    /** Параметр, по которому осуществляется фильтрация.   orders_count - количество заказов. value_type: int64, value_group: single, interval;   spent_sum - сумма потраченных денег. value_type: int64, value_group: single, interval;    average_order_amount - средняя сумма заказа. value_type: int64, value_group: single, interval;   order_date - период с хотя бы одним заказом. value_type: int64, value_group: single, repeated;   loyalty_level - уровень лояльности. value_type: int64, value_group: single;   balance - баланс баллов. value_type: int64, value_group: single, interval;    created_at - дата регистрации. value_type: int64, value_group: single, interval;    gender - пол, использовать Gender. value_type: string, value_group: single.   age - возраст. value_type: int64, value_group: single, interval;   status - статус клиента, использовать ClientStatus. value_type: string, value_group: single.  */
    public var filterParameter: FilterParameter
    public var inputValue: [FilterInputValueInner]?
    public var valueGroup: FilterValueGroup
    public var filterType: FilterType

    public init(filterParameter: FilterParameter, inputValue: [FilterInputValueInner]? = nil, valueGroup: FilterValueGroup, filterType: FilterType) {
        self.filterParameter = filterParameter
        self.inputValue = inputValue
        self.valueGroup = valueGroup
        self.filterType = filterType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filterParameter = "filter_parameter"
        case inputValue = "input_value"
        case valueGroup = "value_group"
        case filterType = "filter_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(filterParameter, forKey: .filterParameter)
        try container.encodeIfPresent(inputValue, forKey: .inputValue)
        try container.encode(valueGroup, forKey: .valueGroup)
        try container.encode(filterType, forKey: .filterType)
    }
}

