//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Product: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var fullName: String?
    public var description: String?
    public var foreignName: String?
    public var descriptionForeign: String?
    public var kitchenName: String?
    public var foodValueFat: Double?
    public var foodValueProtein: Double?
    public var foodValueCarbohydrate: Double?
    public var foodValueCaloricity: Double?
    public var price: Double?
    /** Gets a value that indicates whether the product possible to set an open price. */
    public var canSetOpenPrice: Bool?
    /** enum \\ -1 - Default. Order item should be cooked and served with default priority. 0 - Vip. Order item should be cooked and served as soon as possible, this is highest priority. 1 - First. Order item cooking should start immediately after service cheque printing. 2 - Second. 3 - Third. 4 - Fourth. 5 - Fifth. 6 - Sixth. 7 - Seventh. 8 - Eighth. 9 - Ninth. 10 - Tenth. 11 - Eleventh. 12 - Twelfth. 13 - Thirteenth. 14 - Fourteenth. 15 - Fifteenth. 16 - Sixteenth. 17 - Seventeenth. 18 - Eighteenth. 19 - Nineteenth. 20 - Twentieth. */
    public var defaultCourse: Int?
    /** \\ 0 - Goods, 1 - Dish, 2 - Modifier, 3 - Service, 4 - Rate, 5 - Petrol, 6 - HalfFinishedGoods, 7 - ExternalGoods, 8 - ForPurchase, */
    public var type: Int?
    public var category: Category?
    public var itemCategory: ItemCategory?
    /** Gets a value that indicates whether this product is active in assortment base. Product can be activated or deactivated via iikoOffice. */
    public var isActive: Bool?
    /** Gets an index of product in hierarchical menu, can be used to sort products inside the same product group. */
    public var menuIndex: Int?
    /** Nomenclature article of product. */
    public var number: String?
    public var expirationTime: String?
    /** Measurement unit of product to be displayed */
    public var measuringUnitName: String?
    /** Quick type product code */
    public var fastCode: String?
    public var taxCategory: TaxCategory?
    public var useBalanceForSell: Bool?
    public var cookingPlaceType: CookingPlaceType?

    public init(id: UUID? = nil, name: String? = nil, fullName: String? = nil, description: String? = nil, foreignName: String? = nil, descriptionForeign: String? = nil, kitchenName: String? = nil, foodValueFat: Double? = nil, foodValueProtein: Double? = nil, foodValueCarbohydrate: Double? = nil, foodValueCaloricity: Double? = nil, price: Double? = nil, canSetOpenPrice: Bool? = nil, defaultCourse: Int? = nil, type: Int? = nil, category: Category? = nil, itemCategory: ItemCategory? = nil, isActive: Bool? = nil, menuIndex: Int? = nil, number: String? = nil, expirationTime: String? = nil, measuringUnitName: String? = nil, fastCode: String? = nil, taxCategory: TaxCategory? = nil, useBalanceForSell: Bool? = nil, cookingPlaceType: CookingPlaceType? = nil) {
        self.id = id
        self.name = name
        self.fullName = fullName
        self.description = description
        self.foreignName = foreignName
        self.descriptionForeign = descriptionForeign
        self.kitchenName = kitchenName
        self.foodValueFat = foodValueFat
        self.foodValueProtein = foodValueProtein
        self.foodValueCarbohydrate = foodValueCarbohydrate
        self.foodValueCaloricity = foodValueCaloricity
        self.price = price
        self.canSetOpenPrice = canSetOpenPrice
        self.defaultCourse = defaultCourse
        self.type = type
        self.category = category
        self.itemCategory = itemCategory
        self.isActive = isActive
        self.menuIndex = menuIndex
        self.number = number
        self.expirationTime = expirationTime
        self.measuringUnitName = measuringUnitName
        self.fastCode = fastCode
        self.taxCategory = taxCategory
        self.useBalanceForSell = useBalanceForSell
        self.cookingPlaceType = cookingPlaceType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case name = "Name"
        case fullName = "FullName"
        case description = "Description"
        case foreignName = "ForeignName"
        case descriptionForeign = "DescriptionForeign"
        case kitchenName = "KitchenName"
        case foodValueFat = "FoodValueFat"
        case foodValueProtein = "FoodValueProtein"
        case foodValueCarbohydrate = "FoodValueCarbohydrate"
        case foodValueCaloricity = "FoodValueCaloricity"
        case price = "Price"
        case canSetOpenPrice = "CanSetOpenPrice"
        case defaultCourse = "DefaultCourse"
        case type = "Type"
        case category = "Category"
        case itemCategory = "ItemCategory"
        case isActive = "IsActive"
        case menuIndex = "MenuIndex"
        case number = "Number"
        case expirationTime = "ExpirationTime"
        case measuringUnitName = "MeasuringUnitName"
        case fastCode = "FastCode"
        case taxCategory = "TaxCategory"
        case useBalanceForSell = "UseBalanceForSell"
        case cookingPlaceType = "CookingPlaceType"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(foreignName, forKey: .foreignName)
        try container.encodeIfPresent(descriptionForeign, forKey: .descriptionForeign)
        try container.encodeIfPresent(kitchenName, forKey: .kitchenName)
        try container.encodeIfPresent(foodValueFat, forKey: .foodValueFat)
        try container.encodeIfPresent(foodValueProtein, forKey: .foodValueProtein)
        try container.encodeIfPresent(foodValueCarbohydrate, forKey: .foodValueCarbohydrate)
        try container.encodeIfPresent(foodValueCaloricity, forKey: .foodValueCaloricity)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(canSetOpenPrice, forKey: .canSetOpenPrice)
        try container.encodeIfPresent(defaultCourse, forKey: .defaultCourse)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(itemCategory, forKey: .itemCategory)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(menuIndex, forKey: .menuIndex)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(expirationTime, forKey: .expirationTime)
        try container.encodeIfPresent(measuringUnitName, forKey: .measuringUnitName)
        try container.encodeIfPresent(fastCode, forKey: .fastCode)
        try container.encodeIfPresent(taxCategory, forKey: .taxCategory)
        try container.encodeIfPresent(useBalanceForSell, forKey: .useBalanceForSell)
        try container.encodeIfPresent(cookingPlaceType, forKey: .cookingPlaceType)
    }
}

