//
// SetPaymentForTerminalRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SetPaymentForTerminalRequest: Codable, Hashable {

    public var terminalId: Int64
    public var paymentId: Int64
    /** Имеет приоритет перед for_cashback true - использовать для проведения скидки (если в терминале есть другой платеж для скидки он сбрасывается) false - ничего не меняет, потому что нужен хоть один платеж для скидки. Можно установить только для платежей с can_be_used_for_discount = true  */
    public var forDiscount: Bool?
    /** игнорируется при for_discount = true true - использовать для начисления баллов false - не использовать для начисления баллов (если это последний платеж в терминале, то вернется ошибка,    потому что нужен хоть один платеж для начисления баллов)  */
    public var forCashback: Bool?

    public init(terminalId: Int64, paymentId: Int64, forDiscount: Bool? = nil, forCashback: Bool? = nil) {
        self.terminalId = terminalId
        self.paymentId = paymentId
        self.forDiscount = forDiscount
        self.forCashback = forCashback
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case terminalId = "terminal_id"
        case paymentId = "payment_id"
        case forDiscount = "for_discount"
        case forCashback = "for_cashback"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(terminalId, forKey: .terminalId)
        try container.encode(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(forDiscount, forKey: .forDiscount)
        try container.encodeIfPresent(forCashback, forKey: .forCashback)
    }
}

