//
// PaymentType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PaymentType: Codable, Hashable {

    public var id: String?
    /** Name of payment type */
    public var name: String?
    /** Is payment type combinable with other payment types */
    public var isCombinable: Bool?
    /** Is payment type must be fiscalized on cash register */
    public var printCheque: Bool?
    /** Is payment type must be processed as discount both on cash register and in iiko */
    public var processAsDiscount: Bool?
    /** Is payment type must be fiscalized as discount on cash register but stay as non-fiscal payment in iiko */
    public var fiscalizeAsDiscount: Bool?
    /** \\ 0 - Unknown 1 - Cash 2 - Card 3 - Credit 4 - Writeoff 5 - Voucher 6 - External (custom payment processor) 7 - SmartSale 8 - Sberbank 9 - Trpos */
    public var kind: Int?
    /** Is payment type enabled for some kind of usage */
    public var isEnabled: Bool?
    /** Is payment type hidden from payment type selector UI */
    public var isHidden: Bool?
    /** If change can be displayed for payment type */
    public var canDisplayChange: Bool?
    public var discountType: DiscountType?
    /** Can be added as processed external */
    public var canBeExternalProcessed: Bool?
    /** Indicates if BaseType needs to open cash drawer */
    public var openCashDrawerOnPay: Bool?

    public init(id: String? = nil, name: String? = nil, isCombinable: Bool? = nil, printCheque: Bool? = nil, processAsDiscount: Bool? = nil, fiscalizeAsDiscount: Bool? = nil, kind: Int? = nil, isEnabled: Bool? = nil, isHidden: Bool? = nil, canDisplayChange: Bool? = nil, discountType: DiscountType? = nil, canBeExternalProcessed: Bool? = nil, openCashDrawerOnPay: Bool? = nil) {
        self.id = id
        self.name = name
        self.isCombinable = isCombinable
        self.printCheque = printCheque
        self.processAsDiscount = processAsDiscount
        self.fiscalizeAsDiscount = fiscalizeAsDiscount
        self.kind = kind
        self.isEnabled = isEnabled
        self.isHidden = isHidden
        self.canDisplayChange = canDisplayChange
        self.discountType = discountType
        self.canBeExternalProcessed = canBeExternalProcessed
        self.openCashDrawerOnPay = openCashDrawerOnPay
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case name = "Name"
        case isCombinable = "IsCombinable"
        case printCheque = "PrintCheque"
        case processAsDiscount = "ProcessAsDiscount"
        case fiscalizeAsDiscount = "FiscalizeAsDiscount"
        case kind = "Kind"
        case isEnabled = "IsEnabled"
        case isHidden = "IsHidden"
        case canDisplayChange = "CanDisplayChange"
        case discountType = "DiscountType"
        case canBeExternalProcessed = "CanBeExternalProcessed"
        case openCashDrawerOnPay = "OpenCashDrawerOnPay"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isCombinable, forKey: .isCombinable)
        try container.encodeIfPresent(printCheque, forKey: .printCheque)
        try container.encodeIfPresent(processAsDiscount, forKey: .processAsDiscount)
        try container.encodeIfPresent(fiscalizeAsDiscount, forKey: .fiscalizeAsDiscount)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
        try container.encodeIfPresent(isHidden, forKey: .isHidden)
        try container.encodeIfPresent(canDisplayChange, forKey: .canDisplayChange)
        try container.encodeIfPresent(discountType, forKey: .discountType)
        try container.encodeIfPresent(canBeExternalProcessed, forKey: .canBeExternalProcessed)
        try container.encodeIfPresent(openCashDrawerOnPay, forKey: .openCashDrawerOnPay)
    }
}

