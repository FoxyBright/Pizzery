//
// OutletUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OutletUpdateRequest: Codable, Hashable {

    public var id: Int64?
    /** Название ресторана */
    public var name: String?
    /** Адрес ресторана */
    public var address: String?
    /** Рабочие часы */
    public var workingHours: String?
    /** Номера телефонов */
    public var phones: [String]?
    /** Широта */
    public var latitude: Double?
    /** Долгота */
    public var longitude: Double?
    /** Отображать ли ресторан на карте */
    public var isVisibleOnMap: Bool?
    /** id партнера к которому привязан ресторан */
    public var partnerId: Int64?
    /** Добавлен ли рест в лояльность (изменять отдельной ручкой) */
    public var inLoyalty: Bool?
    /** Урлы пикч */
    public var imageUrls: [String]?
    /** Описание */
    public var description: String?
    /** Краткое описание */
    public var smallDescription: String?
    /** выводятся только для админа и партнера */
    public var terminals: [IikoTerminal]?
    /** Удален из iiko */
    public var isDeleted: Bool?
    public var linksToMaps: [String]?
    /** Урл пикчи меню */
    public var menuImageUrl: String?

    public init(id: Int64? = nil, name: String? = nil, address: String? = nil, workingHours: String? = nil, phones: [String]? = nil, latitude: Double? = nil, longitude: Double? = nil, isVisibleOnMap: Bool? = nil, partnerId: Int64? = nil, inLoyalty: Bool? = nil, imageUrls: [String]? = nil, description: String? = nil, smallDescription: String? = nil, terminals: [IikoTerminal]? = nil, isDeleted: Bool? = nil, linksToMaps: [String]? = nil, menuImageUrl: String? = nil) {
        self.id = id
        self.name = name
        self.address = address
        self.workingHours = workingHours
        self.phones = phones
        self.latitude = latitude
        self.longitude = longitude
        self.isVisibleOnMap = isVisibleOnMap
        self.partnerId = partnerId
        self.inLoyalty = inLoyalty
        self.imageUrls = imageUrls
        self.description = description
        self.smallDescription = smallDescription
        self.terminals = terminals
        self.isDeleted = isDeleted
        self.linksToMaps = linksToMaps
        self.menuImageUrl = menuImageUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case address
        case workingHours = "working_hours"
        case phones
        case latitude
        case longitude
        case isVisibleOnMap = "is_visible_on_map"
        case partnerId = "partner_id"
        case inLoyalty = "in_loyalty"
        case imageUrls = "image_urls"
        case description
        case smallDescription = "small_description"
        case terminals
        case isDeleted = "is_deleted"
        case linksToMaps = "links_to_maps"
        case menuImageUrl = "menu_image_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(workingHours, forKey: .workingHours)
        try container.encodeIfPresent(phones, forKey: .phones)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(isVisibleOnMap, forKey: .isVisibleOnMap)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(inLoyalty, forKey: .inLoyalty)
        try container.encodeIfPresent(imageUrls, forKey: .imageUrls)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(smallDescription, forKey: .smallDescription)
        try container.encodeIfPresent(terminals, forKey: .terminals)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(linksToMaps, forKey: .linksToMaps)
        try container.encodeIfPresent(menuImageUrl, forKey: .menuImageUrl)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension OutletUpdateRequest: Identifiable {}
