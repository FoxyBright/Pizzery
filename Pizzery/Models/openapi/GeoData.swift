//
// GeoData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Данные с сервиса геокодинга */
public struct GeoData: Codable, Hashable {

    /** не форматированный адрес, как он был получен */
    public var source: String?
    /** Форматированный адрес */
    public var result: String?
    /** Индекс */
    public var postalCode: String?
    /** Название страны */
    public var country: String?
    /** Название области / края / региона / федерального округа */
    public var region: String?
    /** Название района / города */
    public var cityArea: String?
    /** Название района внутри города */
    public var cityDistrict: String?
    /** Название улицы */
    public var street: String?
    /** Номер дома */
    public var house: String?
    /** Широта */
    public var geoLat: String?
    /** Долгота */
    public var geoLon: String?
    /** \\ Код качества геоданных 0 – точные координаты дома 1 – ближайший дом 2 – улица 3 – населенный пункт 4 – город 5 – координаты не определены */
    public var qcGeo: Int?

    public init(source: String? = nil, result: String? = nil, postalCode: String? = nil, country: String? = nil, region: String? = nil, cityArea: String? = nil, cityDistrict: String? = nil, street: String? = nil, house: String? = nil, geoLat: String? = nil, geoLon: String? = nil, qcGeo: Int? = nil) {
        self.source = source
        self.result = result
        self.postalCode = postalCode
        self.country = country
        self.region = region
        self.cityArea = cityArea
        self.cityDistrict = cityDistrict
        self.street = street
        self.house = house
        self.geoLat = geoLat
        self.geoLon = geoLon
        self.qcGeo = qcGeo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case source
        case result
        case postalCode = "postal_code"
        case country
        case region
        case cityArea = "city_area"
        case cityDistrict = "city_district"
        case street
        case house
        case geoLat = "geo_lat"
        case geoLon = "geo_lon"
        case qcGeo = "qc_geo"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(result, forKey: .result)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(cityArea, forKey: .cityArea)
        try container.encodeIfPresent(cityDistrict, forKey: .cityDistrict)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(house, forKey: .house)
        try container.encodeIfPresent(geoLat, forKey: .geoLat)
        try container.encodeIfPresent(geoLon, forKey: .geoLon)
        try container.encodeIfPresent(qcGeo, forKey: .qcGeo)
    }
}

