//
// OrderCombo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderCombo: Codable, Hashable {

    public var id: String?
    public var sourceActionId: String?
    /** Identifier of the loyalty program. */
    public var programId: String?
    public var name: String?
    public var amount: Int?
    public var price: Double?
    public var guestId: String?
    /** map[guid]guid */
    public var orderRootItemsByGroups: [String: OrderComboOrderRootItemsByGroupsValue]?
    public var size: ProductSize?

    public init(id: String? = nil, sourceActionId: String? = nil, programId: String? = nil, name: String? = nil, amount: Int? = nil, price: Double? = nil, guestId: String? = nil, orderRootItemsByGroups: [String: OrderComboOrderRootItemsByGroupsValue]? = nil, size: ProductSize? = nil) {
        self.id = id
        self.sourceActionId = sourceActionId
        self.programId = programId
        self.name = name
        self.amount = amount
        self.price = price
        self.guestId = guestId
        self.orderRootItemsByGroups = orderRootItemsByGroups
        self.size = size
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case sourceActionId = "SourceActionId"
        case programId = "ProgramId"
        case name = "Name"
        case amount = "Amount"
        case price = "Price"
        case guestId = "GuestId"
        case orderRootItemsByGroups = "OrderRootItemsByGroups"
        case size = "Size"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(sourceActionId, forKey: .sourceActionId)
        try container.encodeIfPresent(programId, forKey: .programId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(guestId, forKey: .guestId)
        try container.encodeIfPresent(orderRootItemsByGroups, forKey: .orderRootItemsByGroups)
        try container.encodeIfPresent(size, forKey: .size)
    }
}

