//
// BrandConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Настройки бренда */
public struct BrandConfig: Codable, Hashable {

    public var id: Int64?
    /** id партнера */
    public var partnerId: Int64?
    /** primary цвет темы */
    public var primaryColor: String
    /** secondary цвет темы */
    public var secondaryColor: String
    /** accent (brand) цвет темы */
    public var accentColor: String
    /** url c логотипом ресторана */
    public var logo: String?
    /** url c логотипом для мобильного приложения */
    public var mobileAppLogo: String?
    /** шрифт */
    public var fontFamily: String
    /** закругленность интерфейса */
    public var roundness: Int?
    /** название настроек */
    public var name: String?
    /** почта суппорта */
    public var supportEmail: String?
    /** описание */
    public var smallDescription: String?
    /** подробное описание */
    public var description: String?
    /** список контактов */
    public var contactList: [String]?
    /** список картинок */
    public var pictures: [String]?
    /** реферальный бонус */
    public var referralBonus: Int64?
    /** стоимость бонуса */
    public var bonusCost: Int64?
    /** ссылка на play market */
    public var playMarketLink: String?
    /** ссылка на app store */
    public var appStoreLink: String?
    /** ссылка на app gallery */
    public var appGalleryLink: String?
    /** ссылка на политику конфиденциальности */
    public var privacyPolicyLink: String?
    /** ссылка на условия использования */
    public var termsOfUseLink: String?

    public init(id: Int64? = nil, partnerId: Int64? = nil, primaryColor: String, secondaryColor: String, accentColor: String, logo: String? = nil, mobileAppLogo: String? = nil, fontFamily: String, roundness: Int? = nil, name: String? = nil, supportEmail: String? = nil, smallDescription: String? = nil, description: String? = nil, contactList: [String]? = nil, pictures: [String]? = nil, referralBonus: Int64? = nil, bonusCost: Int64? = nil, playMarketLink: String? = nil, appStoreLink: String? = nil, appGalleryLink: String? = nil, privacyPolicyLink: String? = nil, termsOfUseLink: String? = nil) {
        self.id = id
        self.partnerId = partnerId
        self.primaryColor = primaryColor
        self.secondaryColor = secondaryColor
        self.accentColor = accentColor
        self.logo = logo
        self.mobileAppLogo = mobileAppLogo
        self.fontFamily = fontFamily
        self.roundness = roundness
        self.name = name
        self.supportEmail = supportEmail
        self.smallDescription = smallDescription
        self.description = description
        self.contactList = contactList
        self.pictures = pictures
        self.referralBonus = referralBonus
        self.bonusCost = bonusCost
        self.playMarketLink = playMarketLink
        self.appStoreLink = appStoreLink
        self.appGalleryLink = appGalleryLink
        self.privacyPolicyLink = privacyPolicyLink
        self.termsOfUseLink = termsOfUseLink
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case partnerId = "partner_id"
        case primaryColor = "primary_color"
        case secondaryColor = "secondary_color"
        case accentColor = "accent_color"
        case logo
        case mobileAppLogo = "mobile_app_logo"
        case fontFamily = "font_family"
        case roundness
        case name
        case supportEmail = "support_email"
        case smallDescription = "small_description"
        case description
        case contactList = "contact_list"
        case pictures
        case referralBonus = "referral_bonus"
        case bonusCost = "bonus_cost"
        case playMarketLink = "play_market_link"
        case appStoreLink = "app_store_link"
        case appGalleryLink = "app_gallery_link"
        case privacyPolicyLink = "privacy_policy_link"
        case termsOfUseLink = "terms_of_use_link"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encode(primaryColor, forKey: .primaryColor)
        try container.encode(secondaryColor, forKey: .secondaryColor)
        try container.encode(accentColor, forKey: .accentColor)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(mobileAppLogo, forKey: .mobileAppLogo)
        try container.encode(fontFamily, forKey: .fontFamily)
        try container.encodeIfPresent(roundness, forKey: .roundness)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(supportEmail, forKey: .supportEmail)
        try container.encodeIfPresent(smallDescription, forKey: .smallDescription)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(contactList, forKey: .contactList)
        try container.encodeIfPresent(pictures, forKey: .pictures)
        try container.encodeIfPresent(referralBonus, forKey: .referralBonus)
        try container.encodeIfPresent(bonusCost, forKey: .bonusCost)
        try container.encodeIfPresent(playMarketLink, forKey: .playMarketLink)
        try container.encodeIfPresent(appStoreLink, forKey: .appStoreLink)
        try container.encodeIfPresent(appGalleryLink, forKey: .appGalleryLink)
        try container.encodeIfPresent(privacyPolicyLink, forKey: .privacyPolicyLink)
        try container.encodeIfPresent(termsOfUseLink, forKey: .termsOfUseLink)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension BrandConfig: Identifiable {}
