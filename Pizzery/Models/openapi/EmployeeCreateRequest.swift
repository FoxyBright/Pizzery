//
// EmployeeCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EmployeeCreateRequest: Codable, Hashable {

    public var iikoId: UUID
    public var role: EmployeeRole
    /** id ресторана к которому привязан сотрудник */
    public var outletId: Int64
    public var email: String
    public var phone: String?
    /** Двойной sha256 от строки с паролем */
    public var password: String
    /** Имя */
    public var firstName: String?
    /** Фамилия */
    public var lastName: String?
    /** Отчество при наличии */
    public var middleName: String?

    public init(iikoId: UUID, role: EmployeeRole, outletId: Int64, email: String, phone: String? = nil, password: String, firstName: String? = nil, lastName: String? = nil, middleName: String? = nil) {
        self.iikoId = iikoId
        self.role = role
        self.outletId = outletId
        self.email = email
        self.phone = phone
        self.password = password
        self.firstName = firstName
        self.lastName = lastName
        self.middleName = middleName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case iikoId = "iiko_id"
        case role
        case outletId = "outlet_id"
        case email
        case phone
        case password
        case firstName = "first_name"
        case lastName = "last_name"
        case middleName = "middle_name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(iikoId, forKey: .iikoId)
        try container.encode(role, forKey: .role)
        try container.encode(outletId, forKey: .outletId)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encode(password, forKey: .password)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
    }
}

