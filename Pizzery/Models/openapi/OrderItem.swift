//
// OrderItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderItem: Codable, Hashable {

    public var id: UUID?
    public var product: Product?
    public var productCustomName: String?
    public var price: Double?
    public var cost: Double?
    public var openPrice: Double?
    public var isPricePredefined: Bool?
    public var commodityMark: String?
    public var resultSum: Double?
    public var taxPercent: Double?
    public var amount: Double?
    public var cookingStartTime: Date?
    public var cookingFinishTime: Date?
    public var cookingTime: String?
    public var serveTime: String?
    public var comment: String?
    public var course: Int?

    public init(id: UUID? = nil, product: Product? = nil, productCustomName: String? = nil, price: Double? = nil, cost: Double? = nil, openPrice: Double? = nil, isPricePredefined: Bool? = nil, commodityMark: String? = nil, resultSum: Double? = nil, taxPercent: Double? = nil, amount: Double? = nil, cookingStartTime: Date? = nil, cookingFinishTime: Date? = nil, cookingTime: String? = nil, serveTime: String? = nil, comment: String? = nil, course: Int? = nil) {
        self.id = id
        self.product = product
        self.productCustomName = productCustomName
        self.price = price
        self.cost = cost
        self.openPrice = openPrice
        self.isPricePredefined = isPricePredefined
        self.commodityMark = commodityMark
        self.resultSum = resultSum
        self.taxPercent = taxPercent
        self.amount = amount
        self.cookingStartTime = cookingStartTime
        self.cookingFinishTime = cookingFinishTime
        self.cookingTime = cookingTime
        self.serveTime = serveTime
        self.comment = comment
        self.course = course
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case product = "Product"
        case productCustomName = "ProductCustomName"
        case price = "Price"
        case cost = "Cost"
        case openPrice = "OpenPrice"
        case isPricePredefined = "IsPricePredefined"
        case commodityMark = "CommodityMark"
        case resultSum = "ResultSum"
        case taxPercent = "TaxPercent"
        case amount = "Amount"
        case cookingStartTime = "CookingStartTime"
        case cookingFinishTime = "CookingFinishTime"
        case cookingTime = "CookingTime"
        case serveTime = "ServeTime"
        case comment = "Comment"
        case course = "Course"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(product, forKey: .product)
        try container.encodeIfPresent(productCustomName, forKey: .productCustomName)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(cost, forKey: .cost)
        try container.encodeIfPresent(openPrice, forKey: .openPrice)
        try container.encodeIfPresent(isPricePredefined, forKey: .isPricePredefined)
        try container.encodeIfPresent(commodityMark, forKey: .commodityMark)
        try container.encodeIfPresent(resultSum, forKey: .resultSum)
        try container.encodeIfPresent(taxPercent, forKey: .taxPercent)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(cookingStartTime, forKey: .cookingStartTime)
        try container.encodeIfPresent(cookingFinishTime, forKey: .cookingFinishTime)
        try container.encodeIfPresent(cookingTime, forKey: .cookingTime)
        try container.encodeIfPresent(serveTime, forKey: .serveTime)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(course, forKey: .course)
    }
}

